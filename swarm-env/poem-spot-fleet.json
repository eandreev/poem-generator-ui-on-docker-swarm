{
    "Resources": {
        "ManagerInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-f4cc1de2",
                "KeyName": "aws-nvirginia",
                "InstanceType": "t2.micro",
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "WebServerSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n\napt-get install apt-transport-https ca-certificates curl software-properties-common -y\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) edge\"\napt-get update\napt-get install docker-ce -y\nusermod ubuntu -aG docker\n\nwget https://releases.hashicorp.com/consul/0.7.5/consul_0.7.5_linux_amd64.zip\napt-get install unzip -y\nunzip consul_0.7.5_linux_amd64.zip\nmv consul /usr/local/bin/\nadduser --disabled-password --gecos '' consul\nmkdir /var/consul; chown consul:consul /var/consul\n",
                                "( echo '#!/bin/bash';",
                                "echo 'M_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)';",
                                "echo '/usr/local/bin/consul agent -server -bootstrap -node master-$M_IP -bind $M_IP -advertise $M_IP'' -data-dir /var/consul';",
                                "echo ",
                                ") > /usr/local/bin/run-consul\n",
                                "chmod +x /usr/local/bin/run-consul\n",
                                "( echo '[Unit]';",
                                "echo 'Description=consul agent';",
                                "echo ;",
                                "echo '[Service]';",
                                "echo 'EnvironmentFile=-/etc/sysconfig/consul';",
                                "echo 'Restart=always';",
                                "echo 'ExecStart=/usr/local/bin/run-consul';",
                                "echo ;",
                                "echo '[Install]';",
                                "echo 'WantedBy=multi-user.target';",
                                "echo ",
                                ") > /etc/systemd/system/consul.service\n",
                                "systemctl enable consul\n",
                                "systemctl start consul\n",
                                "echo '{\"labels\": [\"node_role=master\"]}' > /etc/docker/daemon.json\n",
                                "systemctl restart docker\n",
                                "( echo '#!/bin/bash';",
                                "echo 'docker swarm init';",
                                "echo 'while true; do';",
                                "echo '    consul kv put swarm_token `docker swarm join-token worker -q`';",
                                "echo '    if [ 0 == $? ]; then';",
                                "echo '        break';",
                                "echo '    fi';",
                                "echo '    echo \"Failed to store the token in the consul kv storage. Sleeping...\"';",
                                "echo '    sleep 1';",
                                "echo 'done'",
                                ") > /usr/local/bin/swarm-init\n",
                                "chmod +x /usr/local/bin/swarm-init\n",
                                "/usr/local/bin/swarm-init\n"
                            ]
                        ]
                    }
                }
            }
        },
        "SpotFleetWorker": {
            "Type": "AWS::EC2::SpotFleet",
            "Properties": {
                "SpotFleetRequestConfigData": {
                    "IamFleetRole": "arn:aws:iam::544719615594:role/spot-fleet",
                    "SpotPrice": "0.20",
                    "TargetCapacity": 1,
                    "LaunchSpecifications": [
                        {
                            "InstanceType": "c4.xlarge",
                            "ImageId": "ami-f4cc1de2",
                            "KeyName": "aws-nvirginia",
                            "NetworkInterfaces": [
                                {
                                    "Groups": [
                                        {
                                            "Ref": "WebServerSecurityGroup"
                                        }
                                    ],
                                    "AssociatePublicIpAddress": "true",
                                    "SubnetId": {
                                        "Ref": "Subnet"
                                    },
                                    "DeviceIndex": "0",
                                    "DeleteOnTermination": "true"
                                }
                            ],
                            "UserData": {
                                "Fn::Base64": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n\napt-get install apt-transport-https ca-certificates curl software-properties-common -y\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) edge\"\napt-get update\napt-get install docker-ce -y\nusermod ubuntu -aG docker\n\nwget https://releases.hashicorp.com/consul/0.7.5/consul_0.7.5_linux_amd64.zip\napt-get install unzip -y\nunzip consul_0.7.5_linux_amd64.zip\nmv consul /usr/local/bin/\nadduser --disabled-password --gecos '' consul\nmkdir /var/consul; chown consul:consul /var/consul\n",
                                            "( echo '#!/bin/bash';",
                                            "echo 'M_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)';",
                                            "echo '/usr/local/bin/consul agent -join '",
                                            {
                                                "Fn::GetAtt": [
                                                    "ManagerInstance",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "' -node worker-$M_IP -bind $M_IP -advertise $M_IP'' -data-dir /var/consul';",
                                            "echo ",
                                            ") > /usr/local/bin/run-consul\n",
                                            "chmod +x /usr/local/bin/run-consul\n",
                                            "( echo '[Unit]';",
                                            "echo 'Description=consul agent';",
                                            "echo ;",
                                            "echo '[Service]';",
                                            "echo 'EnvironmentFile=-/etc/sysconfig/consul';",
                                            "echo 'Restart=always';",
                                            "echo 'ExecStart=/usr/local/bin/run-consul';",
                                            "echo ;",
                                            "echo '[Install]';",
                                            "echo 'WantedBy=multi-user.target';",
                                            "echo ",
                                            ") > /etc/systemd/system/consul.service\n",
                                            "systemctl enable consul\n",
                                            "systemctl start consul\n",
                                            "echo '{\"labels\": [\"node_role=worker\"]}' > /etc/docker/daemon.json\n",
                                            "systemctl restart docker\n",
                                            "( echo '#!/bin/bash';",
                                            "echo 'key_name=swarm_token';",
                                            "echo 'while true; do';",
                                            "echo '    consul kv get $key_name > /dev/null';",
                                            "echo '    if [ 0 == $? ]; then';",
                                            "echo '        consul kv get $key_name';",
                                            "echo '        break';",
                                            "echo '    fi';",
                                            "echo '    echo \"No data yet. sleeping...\"';",
                                            "echo '    sleep 1';",
                                            "echo 'done';",
                                            "echo 'docker swarm join --token `consul kv get swarm_token` '",
                                            {
                                                "Fn::GetAtt": [
                                                    "ManagerInstance",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "':2377'",
                                            ") > /usr/local/bin/swarm-init\n",
                                            "chmod +x /usr/local/bin/swarm-init\n",
                                            "/usr/local/bin/swarm-init\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        "SpotFleetWebserver": {
            "Type": "AWS::EC2::SpotFleet",
            "Properties": {
                "SpotFleetRequestConfigData": {
                    "IamFleetRole": "arn:aws:iam::544719615594:role/spot-fleet",
                    "SpotPrice": "0.20",
                    "TargetCapacity": 1,
                    "LaunchSpecifications": [
                        {
                            "InstanceType": "c3.large",
                            "ImageId": "ami-f4cc1de2",
                            "KeyName": "aws-nvirginia",
                            "NetworkInterfaces": [
                                {
                                    "Groups": [
                                        {
                                            "Ref": "WebServerSecurityGroup"
                                        }
                                    ],
                                    "AssociatePublicIpAddress": "true",
                                    "SubnetId": {
                                        "Ref": "Subnet"
                                    },
                                    "DeviceIndex": "0",
                                    "DeleteOnTermination": "true"
                                }
                            ],
                            "UserData": {
                                "Fn::Base64": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n\napt-get install apt-transport-https ca-certificates curl software-properties-common -y\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) edge\"\napt-get update\napt-get install docker-ce -y\nusermod ubuntu -aG docker\n\nwget https://releases.hashicorp.com/consul/0.7.5/consul_0.7.5_linux_amd64.zip\napt-get install unzip -y\nunzip consul_0.7.5_linux_amd64.zip\nmv consul /usr/local/bin/\nadduser --disabled-password --gecos '' consul\nmkdir /var/consul; chown consul:consul /var/consul\n",
                                            "( echo '#!/bin/bash';",
                                            "echo 'M_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)';",
                                            "echo '/usr/local/bin/consul agent -join '",
                                            {
                                                "Fn::GetAtt": [
                                                    "ManagerInstance",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "' -node webserver-$M_IP -bind $M_IP -advertise $M_IP'' -data-dir /var/consul';",
                                            "echo ",
                                            ") > /usr/local/bin/run-consul\n",
                                            "chmod +x /usr/local/bin/run-consul\n",
                                            "( echo '[Unit]';",
                                            "echo 'Description=consul agent';",
                                            "echo ;",
                                            "echo '[Service]';",
                                            "echo 'EnvironmentFile=-/etc/sysconfig/consul';",
                                            "echo 'Restart=always';",
                                            "echo 'ExecStart=/usr/local/bin/run-consul';",
                                            "echo ;",
                                            "echo '[Install]';",
                                            "echo 'WantedBy=multi-user.target';",
                                            "echo ",
                                            ") > /etc/systemd/system/consul.service\n",
                                            "systemctl enable consul\n",
                                            "systemctl start consul\n",
                                            "echo '{\"labels\": [\"node_role=webserver\"]}' > /etc/docker/daemon.json\n",
                                            "systemctl restart docker\n",
                                            "( echo '#!/bin/bash';",
                                            "echo 'key_name=swarm_token';",
                                            "echo 'while true; do';",
                                            "echo '    consul kv get $key_name > /dev/null';",
                                            "echo '    if [ 0 == $? ]; then';",
                                            "echo '        consul kv get $key_name';",
                                            "echo '        break';",
                                            "echo '    fi';",
                                            "echo '    echo \"No data yet. sleeping...\"';",
                                            "echo '    sleep 1';",
                                            "echo 'done';",
                                            "echo 'docker swarm join --token `consul kv get swarm_token` '",
                                            {
                                                "Fn::GetAtt": [
                                                    "ManagerInstance",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "':2377'",
                                            ") > /usr/local/bin/swarm-init\n",
                                            "chmod +x /usr/local/bin/swarm-init\n",
                                            "/usr/local/bin/swarm-init\n",
                                            "\nmkdir /var/log/poem-generator-www-logs/\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Enable HTTP access via ports 22 and 80",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8300",
                        "ToPort": "8300",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8301",
                        "ToPort": "8301",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "8301",
                        "ToPort": "8301",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8302",
                        "ToPort": "8302",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "8302",
                        "ToPort": "8302",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8400",
                        "ToPort": "8400",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8500",
                        "ToPort": "8500",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8600",
                        "ToPort": "8600",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "8600",
                        "ToPort": "8600",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "2377",
                        "ToPort": "2377",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "7946",
                        "ToPort": "7946",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "7946",
                        "ToPort": "7946",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "4789",
                        "ToPort": "4789",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "4789",
                        "ToPort": "4789",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8888",
                        "ToPort": "8888",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "Subnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.0.0/24",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "Route": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "SubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "InboundHTTPNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                }
            }
        },
        "InboundSSHNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "101",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "22",
                    "To": "22"
                }
            }
        },
        "InboundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                }
            }
        },
        "OutBoundHTTPNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                }
            }
        },
        "OutBoundHTTPSNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "101",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                }
            }
        },
        "OutBoundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                }
            }
        },
        "SubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        }
    }
}